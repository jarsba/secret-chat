{"version":3,"sources":["components/Fonts.js","reducers/userReducer.js","utils/axios.js","services/userService.js","components/Login.js","utils/random.js","components/ChatMessage.js","utils/dateUtils.js","components/ChatDate.js","services/messageService.js","services/chatRoomService.js","components/ChatRoom.js","components/Emoji.js","components/Home.js","components/ThemeToggle.js","components/Header.js","components/Footer.js","components/Layout.js","components/NotFound.js","components/App.js","reducers/index.js","theme.js","index.js"],"names":["Fonts","styles","userSlice","createSlice","name","initialState","logged","token","user_id","reducers","loginAction","state","action","payload","logoutAction","actions","api","axios","create","baseURL","process","interceptors","request","use","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","data","config","removeItem","history","push","login","username","password","a","post","user","jwt","access_token","identity","console","log","getUsers","get","getUser","id","mapDispatchToProps","connect","props","useHistory","useState","email","setEmail","setPassword","dispatch","useDispatch","handleSubmit","event","preventDefault","setItem","bgColor","useColorModeValue","align","justifyContent","maxW","maxH","p","rounded","m","boxShadow","maxWidth","borderWidth","borderRadius","textAlign","my","onSubmit","isRequired","type","placeholder","onChange","currentTarget","value","mt","width","color","uniqueId","btoa","Math","random","substring","ChatMessage","dateObj","Date","time","formattedDate","getHours","slice","getMinutes","chatMessageBg","display","mr","content","fontSize","alignSelf","as","IconButton","aria-label","icon","DragHandle","_hover","background","_focus","outline","minW","zIndex","onClick","deleteMessage","datesAreOnSameDay","first","second","getFullYear","getMonth","getDate","ChatDate","formatteDate","today","dateProps","date","monthString","toLocaleString","month","chatDateBg","getMessagesFromRoom","getMessagesFromUser","postMessage","message","removeMessage","delete","getRooms","getRoom","messages","setMessages","messageValue","setMessageValue","topRef","useRef","bottomRef","useEffect","private","sortMessages","room","socket","socketIOClient","on","ids","sort","join","roomName","send","setTimeout","current","scrollIntoView","disconnect","messagesToSort","b","updated_at","sendMessage","newMessage","recipient_id","room_id","updatedMessages","filter","n","chatHeaderColor","flexDirection","borderTopRadius","alignItems","height","size","src","overflowY","css","ref","map","index","array","message1","message2","date1","date2","messagesShareDate","spacing","pointerEvents","children","Email","focusBorderColor","target","onKeyPress","key","borderBottomLeftRadius","borderBottomRightRadius","colorScheme","Chat","Emoji","className","role","label","aria-hidden","symbol","Home","users","setUsers","rooms","setRooms","usersResponse","userList","roomsResponse","roomList","flexGrow","maxHeight","border","borderColor","href","ThemeToggle","useColorMode","colorMode","toggleColorMode","style","py","Moon","Sun","borderBottomRadius","alt","htmlHeight","htmlWidth","Footer","h","Layout","mx","backgroundImage","direction","xl","flex","flexShrink","NotFound","checkAuthentication","reduxToken","chatRoomMatch","useRouteMatch","privateRoomMatch","isPrivateRoom","path","Number","params","to","exact","combineReducers","userReducer","theme","extendTheme","fonts","heading","body","initialColorMode","useSystemColorMode","store","configureStore","reducer","rootReducer","rootElement","document","getElementById","createBrowserHistory","ReactDOM","render"],"mappings":"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","file":"static/js/main.5ceaf719.chunk.js","sourcesContent":["import { Global } from \"@emotion/react\";\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* Copied from https://fonts.googleapis.com/css2?family=Open+Sans:wght@700&family=Roboto+Mono&display=swap */\n      /* latin-ext */\n      @font-face {\n        font-family: 'Open Sans';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOXOhpOqc.woff2) format('woff2');\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Open Sans';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOUuhp.woff2) format('woff2');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin-ext */\n      @font-face {\n        font-family: 'Roboto Mono';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/robotomono/v13/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_SuW4Ep0.woff2) format('woff2');\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Roboto Mono';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/robotomono/v13/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_ROW4.woff2) format('woff2');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      `}\n  />\n);\n\nexport default Fonts;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  logged: false,\n  token: null,\n  user_id: null,\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    loginAction(state, action) {\n      const { token, user_id } = action.payload;\n      state.logged = true;\n      state.token = token;\n      state.user_id = user_id\n    },\n    logoutAction(state, action) {\n      state.logged = false;\n      state.token = null\n      state.user_id = null\n    }\n  }\n});\n\nexport const { loginAction, logoutAction } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import axios from \"axios\";\nimport {history} from '../index'\n\nconst BASE_URL = process.env.REACT_APP_SC_BASE_URL;\n\nconst api = axios.create({ baseURL: BASE_URL });\n\napi.interceptors.request.use(function(request) {\n  let token = localStorage.getItem(\"token\");\n  request.headers = {\n    Authorization: `JWT ${token}`,\n  }\n  return request;\n}, function(error) {\n  return Promise.reject(error)\n});\n\napi.interceptors.response.use(function(response){\n  return response;\n}, function(error) {\n  const {status, data, config} = error.response\n  if (status === 401) {\n    localStorage.removeItem(\"token\")\n    history.push(\"/login\")\n  }\n});\n\nexport default api;\n","import axios from \"axios\";\nimport jwt from 'jwt-decode'\nimport api from '../utils/axios'\n\nconst login = async (username, password) => {\n  try {\n    let response = await api.post(`/login`, {\n      username: username,\n      password: password,\n    });\n    let data = response.data\n    const user = jwt(data.access_token);\n    return {'access_token': data.access_token, 'user_id': user.identity};\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getUsers = async () => {\n\n  try {\n    let response = await api.get(`/user`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getUser = async (id) => {\n\n  try {\n    let response = await api.get(`/user/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log('Failure');\n    console.log(error);\n  }\n};\n\n\nexport { login, getUsers, getUser };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n} from \"react-router-dom\";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Flex,\n  Box,\n  Heading,\n  Input,\n  Button,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { connect, useDispatch } from 'react-redux'\n\nimport { loginAction } from \"../reducers/userReducer\";\nimport { login } from \"../services/userService\";\n\nfunction Login(props) {\n  const history = useHistory();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    let response = await login(email, password);\n    localStorage.setItem(\"token\", response.access_token)\n    dispatch(loginAction({'token': response.access_token, 'user_id': response.user_id}))\n    history.push(\"/\");\n  };\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Flex\n      align=\"center\"\n      justifyContent=\"center\"\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={10}\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={5}\n      boxShadow=\"md\"\n    >\n      <Box\n        p={8}\n        maxWidth=\"500px\"\n        borderWidth={1}\n        borderRadius={8}\n        boxShadow=\"lg\"\n      >\n        <Box textAlign=\"center\">\n          <Heading>Login</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <form onSubmit={handleSubmit}>\n            <FormControl isRequired>\n              <FormLabel>Username</FormLabel>\n              <Input\n                type=\"text\"\n                placeholder=\"mystery-user-1\"\n                onChange={(event) => setEmail(event.currentTarget.value)}\n              />\n            </FormControl>\n            <FormControl mt={6} isRequired>\n              <FormLabel>Password</FormLabel>\n              <Input\n                type=\"password\"\n                placeholder=\"*******\"\n                onChange={(event) => setPassword(event.currentTarget.value)}\n              />\n            </FormControl>\n            <Button width=\"full\" color=\"teal\" mt={4} type=\"submit\">\n              Sign In\n            </Button>\n          </form>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = {\n  login,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","export const uniqueId = () => {\n  return btoa(Math.random()).substring(0, 12)\n}","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Spacer,\n  IconButton,\n  Menu,\n  MenuList,\n  MenuItem,\n  MenuButton,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { DragHandleIcon } from \"@chakra-ui/icons\";\n\nimport { uniqueId } from \"../utils/random\";\n\nfunction ChatMessage(props) {\n  let dateObj = new Date(props.time);\n  let formattedDate = `${(\"0\" + dateObj.getHours()).slice(-2)}.${(\n    \"0\" + dateObj.getMinutes()\n  ).slice(-2)}`;\n  const chatMessageBg = useColorModeValue(\"white\", \"teal.800\");\n\n  return (\n    <Flex justifyContent={props.justifyContent} width=\"100%\" key={uniqueId()}>\n      <Box\n        display=\"flex\"\n        boxShadow=\"md\"\n        bgColor={chatMessageBg}\n        m=\"3\"\n        p=\"3\"\n        borderRadius=\"20px\"\n      >\n        <Text mr={3} p={1}>\n          {props.content}\n        </Text>\n        <Text fontSize=\"xs\" alignSelf=\"flex-end\">\n          {formattedDate}\n        </Text>\n      </Box>\n\n      <Menu >\n        <MenuButton\n          as={IconButton}\n          alignSelf=\"center\"\n          color=\"gray.200\"\n          bgColor=\"transparent\"\n          aria-label=\"Options\"\n          icon={<DragHandleIcon />}\n          _hover={{\n            background: \"transparent\",\n            color: \"teal.500\",\n          }}\n          _focus={{\n            outline: \"0\",\n          }}\n        >\n          {\" \"}\n        </MenuButton>\n        <MenuList minW={\"4rem\"} zIndex={20}>\n          <MenuItem key={uniqueId()} onClick={() => props.deleteMessage(props.id)}>\n            Delete\n          </MenuItem>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n}\n\nexport default ChatMessage;\n","const datesAreOnSameDay = (first, second) => {\n  return first.getFullYear() === second.getFullYear() && first.getMonth() === second.getMonth() && first.getDate() === second.getDate();\n}\n\nconst datesAreConsecutive = (first, second) => {\n  return first.getFullYear() === second.getFullYear() &&first.getMonth() === second.getMonth() && first.getDate() === second.getDate() + 1;\n}\n\nexport { datesAreOnSameDay, datesAreConsecutive }","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Spacer,\n  IconButton,\n  useColorModeValue,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { datesAreOnSameDay, datesAreConsecutive } from \"../utils/dateUtils\";\n\nimport { uniqueId } from \"../utils/random\";\n\nfunction ChatDate(props) {\n  let today = new Date();\n  let dateProps = new Date(props.date)\n  let formatteDate;\n  if (datesAreOnSameDay(today, dateProps)) {\n    formatteDate = \"Today\"\n  } else if (datesAreConsecutive(today, dateProps)) {\n    formatteDate = \"Yesterday\"\n  } else {\n    const monthString = dateProps.toLocaleString('default', { month: 'long' });\n    formatteDate = `${dateProps.getDate()}. ${monthString} ${dateProps.getFullYear()}`;\n  }\n\n  const chatDateBg = useColorModeValue(\"yellow.200\", \"yellow.800\");\n\n  return (\n    <Flex justifyContent={\"center\"} width=\"100%\" key={uniqueId()}>\n      <Box boxShadow=\"md\" bgColor={chatDateBg} m=\"1\" p=\"1\" borderRadius=\"20px\">\n        <Text fontSize=\"xs\" p={1}>\n          {formatteDate}\n        </Text>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default ChatDate;\n","import api from '../utils/axios'\n\n\nconst getMessagesFromRoom = async (id) => {\n  try {\n    let response = await api.get(`/message/chatroom/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMessagesFromUser = async (id) => {\n  try {\n    let response = await api.get(`/message/user/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst postMessage = async (message) => {\n  try {\n    let response = await api.post(`/message`, message);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst removeMessage = async (id) => {\n  console.log('Remove message with id ', id);\n  try {\n    let response = await api.delete(`/message/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport { getMessagesFromRoom, getMessagesFromUser, postMessage, removeMessage };\n","import api from '../utils/axios'\n\nconst getRooms = async () => {\n  try {\n    let response = await api.get(`/chatroom`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getRoom = async (id) => {\n\n  try {\n    let response = await api.get(`/chatroom/${id}`);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n\nexport { getRooms, getRoom };\n","import React, { useEffect, useState, useRef } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport {\n  Flex,\n  Box,\n  Heading,\n  Stack,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n  Input,\n  IconButton,\n  Textarea,\n  ListItem,\n  List,\n  Avatar,\n  Tooltip,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { connect } from \"react-redux\";\nimport { ChatIcon, EmailIcon } from \"@chakra-ui/icons\";\n\nimport ChatMessage from \"./ChatMessage\";\nimport ChatDate from \"./ChatDate\";\n\nimport {\n  getMessagesFromRoom,\n  getMessagesFromUser,\n  postMessage,\n  removeMessage,\n} from \"../services/messageService\";\n\nimport { getRoom } from \"../services/chatRoomService\";\n\nimport { getUser } from \"../services/userService\";\n\nimport { uniqueId } from \"../utils/random\";\nimport { datesAreOnSameDay } from \"../utils/dateUtils\";\n\nconst SOCKETIO_URL = \"http://0.0.0.0:5000/\";\n\nfunction ChatRoom(props) {\n  const [messages, setMessages] = useState([]);\n  const [messageValue, setMessageValue] = useState(\"\");\n  const handleChange = (event) => {\n    setMessageValue(event.target.value);\n  };\n\n  const [top, setTop] = useState(null);\n  const topRef = useRef(null);\n  const bottomRef = useRef();\n\n  useEffect(async () => {\n    if (props.private) {\n      const user = await getUser(props.id);\n      console.log(user);\n      const response = await getMessagesFromUser(props.id);\n      let messages = response.data;\n      // Sort descending\n      messages = sortMessages(messages);\n      setMessages(messages);\n    } else {\n      const room = await getRoom(props.id);\n      console.log(room);\n\n      const response = await getMessagesFromRoom(props.id);\n      let messages = response.data;\n      // Sort descending\n      messages = sortMessages(messages);\n      setMessages(messages);\n    }\n\n\n    const socket = socketIOClient(SOCKETIO_URL);\n    socket.on(\"connect\", (data) => {\n      console.log('SOCKET CONNECTION');\n      console.log(data);\n      const ids = [props.user.user_id, props.id].sort().join(\"\")\n      console.log(ids)\n      const roomName = props.private ? `chat-${ids}` : `room-${props.id}`\n      console.log(roomName);\n      socket.send(\"join\", {\"room\": roomName})\n    });\n\n    socket.on(\"message\", (data) => {\n      console.log('RECEIVED DATA', data);\n    });\n\n    setTimeout(() => {\n      bottomRef.current.scrollIntoView();\n    }, 1);\n\n    return () => socket.disconnect();\n  }, []);\n\n  const sortMessages = (messagesToSort) => {\n    let sortedMessages = messagesToSort.sort((a, b) =>\n      new Date(a.updated_at) > new Date(b.updated_at) ? 1 : -1\n    );\n    return sortedMessages;\n  };\n\n  const messagesShareDate = (message1, message2) => {\n    let date1 = new Date(message1.updated_at);\n    let date2 = new Date(message2.updated_at);\n    let shareDate = datesAreOnSameDay(date1, date2);\n    return shareDate;\n  };\n\n  const sendMessage = async () => {\n    if (messageValue != \"\") {\n      let newMessage;\n      if (props.private) {\n        newMessage = {\n          content: messageValue,\n          user_id: props.user.user_id,\n          recipient_id: props.id,\n        };\n      } else {\n        newMessage = {\n          content: messageValue,\n          user_id: props.user.user_id,\n          room_id: props.id,\n        };\n      }\n      const response = await postMessage(newMessage);\n      let updatedMessages = sortMessages([...messages, response.data]);\n      setMessages(updatedMessages);\n      setMessageValue(\"\");\n\n      bottomRef.current.scrollIntoView();\n    }\n  };\n\n  const deleteMessage = async (id) => {\n    console.log(\"Delete message\");\n    console.log(id);\n\n    const response = await removeMessage(id);\n    console.log(response);\n\n    let updatedMessages = messages.filter((n) => n.id !== id);\n    setMessages(updatedMessages);\n  };\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const chatHeaderColor = useColorModeValue(\"teal\", \"teal.800\");\n\n  return (\n    <Flex\n      maxW=\"100%\"\n      maxH=\"100%\"\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n      flexDirection=\"column\"\n    >\n      <Box\n        key={uniqueId()}\n        display=\"flex\"\n        borderTopRadius=\"md\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        m={0}\n        p={0}\n        bgColor={chatHeaderColor}\n        maxW=\"100%\"\n        height=\"70px\"\n        textAlign=\"center\"\n      >\n        <Avatar\n          size=\"md\"\n          name=\"Dan Abrahmov\"\n          src=\"https://bit.ly/dan-abramov\"\n          mr=\"3\"\n        />\n        <Heading as=\"h4\" size=\"md\" color=\"white\">\n          User\n        </Heading>\n      </Box>\n      <List\n        key={uniqueId()}\n        maxW=\"100%\"\n        height=\"75vh\"\n        overflowY=\"scroll\"\n        bgColor={bgColor}\n        css={{\n          \"::-webkit-scrollbar\": {\n            width: \"5px\",\n            borderRadius: \"10px\",\n          },\n\n          /* Track */\n          \"::-webkit-scrollbar-track\": {\n            background: \"#f1f1f1\",\n            borderRadius: \"10px\",\n          },\n\n          /* Handle */\n          \"::-webkit-scrollbar-thumb\": {\n            background: \"#888\",\n            borderRadius: \"10px\",\n          },\n\n          /* Handle on hover */\n          \"::-webkit-scrollbar-thumb:hover\": {\n            background: \"#555\",\n          },\n        }}\n      >\n        <ListItem key={uniqueId()}>\n          <div key={uniqueId()} ref={topRef}></div>\n        </ListItem>\n        {messages.map((message, index, array) => {\n          if (index == 0) {\n            return (\n              <>\n                <ListItem width=\"100%\" key={uniqueId()}>\n                  <ChatDate key={uniqueId()} date={message.updated_at} />\n                </ListItem>\n                <ListItem\n                  width=\"100%\"\n                  key={uniqueId()}\n                  justifyContent={\n                    message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                  }\n                >\n                  <ChatMessage\n                    key={uniqueId()}\n                    id={message.id}\n                    content={message.content}\n                    time={message.updated_at}\n                    deleteMessage={deleteMessage}\n                    justifyContent={\n                      message.user_id === props.user.user_id\n                        ? \"flex-end\"\n                        : \"flex-start\"\n                    }\n                  />\n                </ListItem>\n              </>\n            );\n          } else if (messagesShareDate(message, array[index - 1]) === false) {\n            return (\n              <>\n                <ListItem width=\"100%\" key={uniqueId()}>\n                  <ChatDate key={uniqueId()} date={message.updated_at} />\n                </ListItem>\n                <ListItem\n                  width=\"100%\"\n                  key={uniqueId()}\n                  justifyContent={\n                    message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                  }\n                >\n                  <ChatMessage\n                    key={uniqueId()}\n                    id={message.id}\n                    content={message.content}\n                    time={message.updated_at}\n                    deleteMessage={deleteMessage}\n                    justifyContent={\n                      message.user_id === props.user.user_id\n                        ? \"flex-end\"\n                        : \"flex-start\"\n                    }\n                  />\n                </ListItem>\n              </>\n            );\n          } else {\n            return (\n              <ListItem\n                width=\"100%\"\n                key={uniqueId()}\n                justifyContent={\n                  message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                }\n              >\n                <ChatMessage\n                  key={uniqueId()}\n                  id={message.id}\n                  content={message.content}\n                  time={message.updated_at}\n                  deleteMessage={deleteMessage}\n                  justifyContent={\n                    message.user_id === props.user.user_id\n                      ? \"flex-end\"\n                      : \"flex-start\"\n                  }\n                />\n              </ListItem>\n            );\n          }\n        })}\n        <ListItem key={uniqueId()}>\n          <div ref={bottomRef}></div>\n        </ListItem>\n      </List>\n      <Box maxW=\"100%\" height=\"40px\">\n        <Stack spacing={4}>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<EmailIcon color=\"gray.300\" />}\n            />\n            <Input\n              size=\"md\"\n              placeholder=\"Message\"\n              focusBorderColor=\"teal.500\"\n              value={messageValue}\n              onChange={handleChange}\n              onKeyPress={(event) => event.key === \"Enter\" && sendMessage()}\n            />\n            <InputRightElement>\n              <IconButton\n                borderTopRadius=\"0px\"\n                borderBottomLeftRadius=\"0px\"\n                borderBottomRightRadius=\"md\"\n                colorScheme=\"teal\"\n                aria-label=\"Send\"\n                icon={<ChatIcon />}\n                onClick={() => sendMessage()}\n              />\n            </InputRightElement>\n          </InputGroup>\n        </Stack>\n      </Box>\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, null)(ChatRoom);\n","import React from \"react\";\n\nconst Emoji = (props) => (\n  <span\n    className=\"emoji\"\n    role=\"img\"\n    aria-label={props.label ? props.label : \"\"}\n    aria-hidden={props.label ? \"false\" : \"true\"}\n  >\n    {props.symbol}\n  </span>\n);\nexport default Emoji;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  List,\n  Button,\n  ListItem,\n  Box,\n  Spacer,\n  Heading,\n  Text,\n  Center,\n  Divider,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport Emoji from \"./Emoji\";\n\nimport { getUsers } from \"../services/userService\";\nimport { getRooms } from \"../services/chatRoomService\";\n\nfunction Home(props) {\n  const [users, setUsers] = useState([]);\n  const [rooms, setRooms] = useState([]);\n\n  useEffect(async () => {\n    let usersResponse = await getUsers();\n    let userList = usersResponse.data;\n\n    let roomsResponse = await getRooms();\n    let roomList = roomsResponse.data\n\n    setUsers(userList);\n    setRooms(roomList);\n  }, []);\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const scrollbarColor = useColorModeValue(\"#123123\", \"#643345\");\n\n  return (\n    <Flex\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={2}\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n    >\n      <Box flexGrow=\"1\" textAlign=\"center\">\n        <Heading as=\"h3\" size=\"lg\">\n          <Emoji symbol=\"👥\" /> Join a room!\n        </Heading>\n        <List\n          maxHeight=\"80vh\"\n          overflowY=\"scroll\"\n          spacing={3}\n          m={1}\n          p={3}\n          css={{\n            \"::-webkit-scrollbar\": {\n              width: \"5px\",\n              borderRadius: \"10px\",\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n              background: \"#f1f1f1\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n              background: \"#888\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n              background: \"#555\",\n            },\n          }}\n        >\n          {rooms.map((room) => {\n            return (\n              <ListItem key={room.id}>\n                <Button\n                  size=\"md\"\n                  height=\"48px\"\n                  width=\"100%\"\n                  border=\"2px\"\n                  borderColor=\"teal\"\n                  as=\"a\"\n                  href={\"/chatroom/\" + room.id}\n                >\n                  {room.name}\n                </Button>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n      <Box flexGrow=\"1\" textAlign=\"center\">\n        <Heading as=\"h3\" size=\"lg\">\n          <Emoji symbol=\"🤫\" /> Private chat!\n        </Heading>\n        <List\n          maxHeight=\"80vh\"\n          overflowY=\"scroll\"\n          spacing={3}\n          m={1}\n          p={3}\n          css={{\n            \"::-webkit-scrollbar\": {\n              width: \"5px\",\n              borderRadius: \"10px\",\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n              background: \"#f1f1f1\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n              background: \"#888\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n              background: \"#555\",\n            },\n          }}\n        >\n          {users.map((user) => {\n            return (\n              <ListItem key={user.id}>\n                <Button\n                  size=\"md\"\n                  height=\"48px\"\n                  width=\"100%\"\n                  border=\"2px\"\n                  borderColor=\"teal\"\n                  as=\"a\"\n                  href={\"/chatroom/private/\" + user.id}\n                >\n                  {user.username}\n                </Button>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { useColorMode, Box, IconButton } from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nfunction ThemeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <div style={{display:\"show\"}}>\n    <Box textAlign=\"right\" py={4} mr={12}>\n      <IconButton\n        icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n        onClick={toggleColorMode}\n      />\n    </Box>\n    </div>\n  );\n}\n\nexport default ThemeToggle;\n","import React, { useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Flex, Box, Heading, Spacer, Button } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, useColorModeValue } from \"@chakra-ui/react\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { logoutAction } from \"../reducers/userReducer\";\n\nfunction Header(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  const home = () => {\n    history.push(\"/\");\n  };\n\n  const logout = () => {\n    dispatch(logoutAction());\n    localStorage.removeItem(\"token\");\n    history.push(\"/login\");\n  };\n\n  const login = () => {\n    history.push(\"/login\");\n  };\n\n  return (\n    <Flex\n      align=\"center\"\n      p={2}\n      boxShadow=\"md\"\n      borderBottomRadius=\"md\"\n      bgColor={bgColor}\n    >\n      <Box as=\"button\" p=\"2\" onClick={() => home()} outline=\"0\">\n        <Image\n          src=\"/logo_200.png\"\n          alt=\"Secret Chat\"\n          htmlHeight=\"100px\"\n          htmlWidth=\"150px\"\n        />\n      </Box>\n      <Spacer />\n      {props.user.logged ? (\n        <Button mr={4} colorScheme=\"teal\" onClick={() => logout()}>\n          Log out\n        </Button>\n      ) : (\n        <Button mr={4} colorScheme=\"teal\" onClick={() => login()}>\n          Log in\n        </Button>\n      )}\n      <ThemeToggle />\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = {\n  logoutAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { useEffect } from \"react\";\nimport { Center, Flex } from \"@chakra-ui/react\";\nimport { Text, useColorModeValue } from \"@chakra-ui/react\";\n\nfunction Footer(props) {\n  const bgColor = useColorModeValue(\"teal\", \"gray.800\")\n\n  return (\n    <>\n      <Center\n        bgColor={bgColor}\n        //bgGradient={bgGradient}\n        h=\"60px\"\n        color=\"white\"\n        mt=\"auto\"\n        borderTopRadius=\"md\"\n        boxShadow=\"md\"\n      >\n        <Text fontSize=\"lg\">Made with 💖 from Helsinki</Text>\n      </Center>\n    </>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\nimport {\n  Flex,\n  Container,\n  Box,\n  Spacer,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nfunction Layout(props) {\n  const bgColor = useColorModeValue(\"gray.200\", \"gray.900\")\n  const backgroundImage = \"url('/bg.svg')\"\n  \n  return (\n    <>\n      <Box\n        width=\"100vw\"\n        height=\"100vh\"\n        maxWidth=\"100vw\"\n        maxHeight=\"100vh\"\n\n        mx=\"auto\"\n        bgColor={bgColor}\n        backgroundImage={backgroundImage}\n      >\n        <Flex\n          direction=\"column\"\n          maxW={{ xl: \"1200px\" }}\n          height=\"100%\"\n          m=\"0 auto\"\n          {...props}\n        >\n          <Header />\n          <Box flex=\"1 0 auto\">{props.children}</Box>\n          <Footer flexShrink=\"0\" />\n        </Flex>\n      </Box>\n    </>\n  );\n}\n\nexport default Layout;\n","import React, { useEffect } from \"react\";\nimport {\n  Flex,\n  Center,\n  Heading,\n  Image,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nfunction NotFound(props) {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Flex\n      align=\"center\"\n      justifyContent=\"center\"\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={2}\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n    >\n      <div>\n        <Image ></Image>\n        <Text fontSize=\"3xl\">404 Not found</Text>\n      </div>\n    </Flex>\n  );\n}\n\nexport default NotFound;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport jwt from 'jwt-decode'\nimport { connect, useDispatch } from \"react-redux\";\nimport { loginAction, validateToken } from \"../reducers/userReducer\";\nimport Login from \"./Login\";\nimport ChatRoom from \"./ChatRoom\";\nimport Home from \"./Home\";\nimport Layout from \"./Layout\";\nimport NotFound from \"./NotFound\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n\n  const checkAuthentication = () => {\n    let reduxToken = props.user.token\n    let token = localStorage.getItem(\"token\")\n    if (token && reduxToken) {\n      return true;\n    } else if (!token && reduxToken) {\n      localStorage.setItem(\"token\", reduxToken);\n      return true;\n    } else if (!reduxToken && token) {\n      const user_id = jwt(token).identity\n      dispatch(loginAction({ token: token, user_id: user_id}));\n      return true;\n    }\n    return false;\n  };\n\n  const chatRoomMatch = useRouteMatch(\"/chatroom/:id\");\n  const privateRoomMatch = useRouteMatch(\"/chatroom/private/:id\");\n  const isChatRoom = chatRoomMatch ? true : false;\n  const isPrivateRoom = privateRoomMatch ? true : false;\n\n  return (\n    <>\n      <Switch>\n        <Route path={[\"/chatroom/:id\", \"/chatroom/private/:id\"]}>\n          {() =>\n            checkAuthentication() ? (\n              <Layout>\n                <ChatRoom\n                  private={isPrivateRoom}\n                  id={\n                    isPrivateRoom\n                      ? Number(privateRoomMatch.params.id)\n                      : Number(chatRoomMatch.params.id)\n                  }\n                />\n              </Layout>\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        </Route>\n        <Route path=\"/login\">\n          {() =>\n            checkAuthentication() ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Layout>\n                <Login />\n              </Layout>\n            )\n          }\n        </Route>\n        <Route exact path=\"/\">\n          {() =>\n            checkAuthentication() ? (\n              <Layout>\n                <Home />\n              </Layout>\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        </Route>\n        <Route>\n          <Layout>\n            <NotFound />\n          </Layout>\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux'\n\nimport userReducer from './userReducer'\n\nexport default combineReducers({\n    user: userReducer,\n})\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { mode } from \"@chakra-ui/theme-tools\";\n\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"Roboto Mono\",\n  },\n  config,\n});\n\n\nexport default theme","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  ColorModeProvider,\n} from \"@chakra-ui/react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { mode } from \"@chakra-ui/theme-tools\";\nimport Fonts from \"./components/Fonts\";\nimport App from \"./components/App\";\nimport rootReducer from \"./reducers\";\nimport { extendTheme } from \"@chakra-ui/react\";\nimport \"./index.css\";\nimport theme from \"./theme\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nconst rootElement = document.getElementById(\"root\");\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <Fonts />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ChakraProvider>,\n  rootElement\n);\n"],"sourceRoot":""}