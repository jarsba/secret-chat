{"version":3,"sources":["components/Fonts.js","reducers/userReducer.js","services/userService.js","components/Login.js","components/ChatMessage.js","utils/dateUtils.js","components/ChatDate.js","services/messageService.js","components/ChatRoom.js","components/Emoji.js","services/chatRoomService.js","components/Home.js","components/ThemeToggle.js","components/Header.js","components/Footer.js","components/Layout.js","components/NotFound.js","components/App.js","reducers/index.js","theme.js","index.js"],"names":["Fonts","styles","userSlice","createSlice","name","initialState","logged","token","user_id","reducers","loginAction","state","action","payload","logoutAction","actions","BASE_URL","process","login","username","password","a","axios","post","response","data","user","jwt","access_token","identity","console","log","getUsers","localStorage","getItem","get","headers","Authorization","mapDispatchToProps","connect","props","history","useHistory","useState","email","setEmail","setPassword","dispatch","useDispatch","handleSubmit","event","preventDefault","setItem","push","bgColor","useColorModeValue","align","justifyContent","maxW","maxH","p","rounded","m","boxShadow","maxWidth","borderWidth","borderRadius","textAlign","my","onSubmit","isRequired","type","placeholder","onChange","currentTarget","value","mt","width","color","ChatMessage","dateObj","Date","time","formattedDate","getHours","getMinutes","display","mr","content","fontSize","alignSelf","as","IconButton","aria-label","icon","DragHandle","_hover","background","_focus","outline","minW","datesAreOnSameDay","first","second","getFullYear","getMonth","getDate","ChatDate","today","formatteDate","dateProps","date","monthString","toLocaleString","month","getMessagesFromRoom","id","getMessagesFromUser","postMessage","message","messages","setMessages","messageValue","setMessageValue","topRef","useRef","bottomRef","useEffect","private","sortMessages","setTimeout","current","scrollIntoView","messagesToSort","sort","b","updated_at","sendMessage","newMessage","recipient_id","room_id","updatedMessages","length","flexDirection","borderTopRadius","alignItems","height","size","src","overflowY","css","ref","map","index","array","message1","message2","date1","date2","messagesShareDate","spacing","pointerEvents","children","Email","focusBorderColor","target","onKeyPress","key","borderBottomLeftRadius","borderBottomRightRadius","colorScheme","Chat","onClick","Emoji","className","role","label","aria-hidden","symbol","getRooms","Home","users","setUsers","rooms","setRooms","usersResponse","userList","roomsResponse","roomList","flexGrow","maxHeight","room","border","borderColor","href","ThemeToggle","useColorMode","colorMode","toggleColorMode","style","py","Moon","Sun","borderBottomRadius","alt","htmlHeight","htmlWidth","removeItem","Footer","h","Layout","mx","backgroundImage","direction","xl","flex","flexShrink","NotFound","checkAuthentication","chatRoomMatch","useRouteMatch","privateRoomMatch","isPrivateRoom","path","Number","params","to","exact","combineReducers","userReducer","theme","extendTheme","fonts","heading","body","config","initialColorMode","useSystemColorMode","store","configureStore","reducer","rootReducer","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.2c0c4921.chunk.js","sourcesContent":["import { Global } from \"@emotion/react\";\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* Copied from https://fonts.googleapis.com/css2?family=Open+Sans:wght@700&family=Roboto+Mono&display=swap */\n      /* latin-ext */\n      @font-face {\n        font-family: 'Open Sans';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOXOhpOqc.woff2) format('woff2');\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Open Sans';\n        font-style: normal;\n        font-weight: 700;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/opensans/v18/mem5YaGs126MiZpBA-UN7rgOUuhp.woff2) format('woff2');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin-ext */\n      @font-face {\n        font-family: 'Roboto Mono';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/robotomono/v13/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_SuW4Ep0.woff2) format('woff2');\n        unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'Roboto Mono';\n        font-style: normal;\n        font-weight: 400;\n        font-display: swap;\n        src: url(https://fonts.gstatic.com/s/robotomono/v13/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_ROW4.woff2) format('woff2');\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      `}\n  />\n);\n\nexport default Fonts;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  logged: false,\n  token: null,\n  user_id: null,\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: initialState,\n  reducers: {\n    loginAction(state, action) {\n      const { token, user_id } = action.payload;\n      state.logged = true;\n      state.token = token;\n      state.user_id = user_id\n    },\n    logoutAction(state, action) {\n      state.logged = false;\n      state.token = null\n      state.user_id = null\n    }\n  }\n});\n\nexport const { loginAction, logoutAction } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import axios from \"axios\";\nimport jwt from 'jwt-decode'\nimport { cloneElement } from \"react\";\n\nconst BASE_URL = process.env.REACT_APP_SC_BASE_URL;\n\nconst login = async (username, password) => {\n  try {\n    let response = await axios.post(`${BASE_URL}/login`, {\n      username: username,\n      password: password,\n    });\n    let data = response.data\n    const user = jwt(data.access_token);\n    return {'access_token': data.access_token, 'user_id': user.identity};\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getUsers = async () => {\n  let token = localStorage.getItem(\"token\");\n\n  try {\n    let response = await axios.get(`${BASE_URL}/user`, {\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { login, getUsers };\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useHistory,\n} from \"react-router-dom\";\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  Flex,\n  Box,\n  Heading,\n  Input,\n  Button,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { connect, useDispatch } from 'react-redux'\n\nimport { loginAction } from \"../reducers/userReducer\";\nimport { login } from \"../services/userService\";\n\nfunction Login(props) {\n  const history = useHistory();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch()\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    console.log(`Email: ${email} & Password: ${password}`);\n    let response = await login(email, password);\n    localStorage.setItem('token', response.access_token)\n    dispatch(loginAction({'token': response.access_token, 'user_id': response.user_id}))\n    history.push(\"/\");\n  };\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Flex\n      align=\"center\"\n      justifyContent=\"center\"\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={10}\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={5}\n      boxShadow=\"md\"\n    >\n      <Box\n        p={8}\n        maxWidth=\"500px\"\n        borderWidth={1}\n        borderRadius={8}\n        boxShadow=\"lg\"\n      >\n        <Box textAlign=\"center\">\n          <Heading>Login</Heading>\n        </Box>\n        <Box my={4} textAlign=\"left\">\n          <form onSubmit={handleSubmit}>\n            <FormControl isRequired>\n              <FormLabel>Username</FormLabel>\n              <Input\n                type=\"text\"\n                placeholder=\"mystery-user-1\"\n                onChange={(event) => setEmail(event.currentTarget.value)}\n              />\n            </FormControl>\n            <FormControl mt={6} isRequired>\n              <FormLabel>Password</FormLabel>\n              <Input\n                type=\"password\"\n                placeholder=\"*******\"\n                onChange={(event) => setPassword(event.currentTarget.value)}\n              />\n            </FormControl>\n            <Button width=\"full\" color=\"teal\" mt={4} type=\"submit\">\n              Sign In\n            </Button>\n          </form>\n        </Box>\n      </Box>\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = {\n  login,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Spacer,\n  IconButton,\n  Menu,\n  MenuList,\n  MenuItem,\n  MenuButton\n} from \"@chakra-ui/react\";\nimport { DragHandleIcon } from \"@chakra-ui/icons\";\n\nfunction ChatMessage(props) {\n\n  let dateObj = new Date(props.time)\n  let formattedDate = `${dateObj.getHours()}.${dateObj.getMinutes()}`\n\n  return (\n    <Flex justifyContent={props.justifyContent} width=\"100%\" >\n      <Box\n        display=\"flex\"\n        boxShadow=\"md\"\n        bgColor=\"white\"\n        m=\"3\"\n        p=\"3\"\n        borderRadius=\"20px\"\n      >\n        <Text mr={3} p={1}>\n          {props.content}\n        </Text>\n        <Spacer />\n        <Text fontSize=\"xs\" alignSelf=\"flex-end\">\n          {formattedDate}\n        </Text>\n      </Box>\n\n      <Menu>\n        <MenuButton\n          as={IconButton}\n          alignSelf=\"center\"\n          color=\"gray.200\"\n          bgColor=\"transparent\"\n          aria-label=\"Options\"\n          icon={<DragHandleIcon />}\n          _hover={{\n            background: \"transparent\",\n            color: \"teal.500\",\n          }}\n          _focus={{\n            outline: \"0\",\n          }}\n        >\n          {\" \"}\n        </MenuButton>\n        <MenuList minW={\"4rem\"}>\n          <MenuItem>Delete</MenuItem>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n}\n\nexport default ChatMessage;\n","const datesAreOnSameDay = (first, second) => {\n  return first.getFullYear() === second.getFullYear() && first.getMonth() === second.getMonth() && first.getDate() === second.getDate();\n}\n\nconst datesAreConsecutive = (first, second) => {\n  return first.getFullYear() === second.getFullYear() &&first.getMonth() === second.getMonth() && first.getDate() === second.getDate() + 1;\n}\n\nexport { datesAreOnSameDay, datesAreConsecutive }","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  Box,\n  Text,\n  Spacer,\n  IconButton,\n  useColorModeValue,\n  Icon,\n} from \"@chakra-ui/react\";\nimport { datesAreOnSameDay, datesAreConsecutive } from \"../utils/dateUtils\";\n\nfunction ChatDate(props) {\n  let today = new Date();\n  console.log('TODAY', today);\n  let dateProps = new Date(props.date)\n  console.log(\"DATE PROPS\", dateProps);\n  let formatteDate;\n  if (datesAreOnSameDay(today, dateProps)) {\n    formatteDate = \"Today\"\n  } else if (datesAreConsecutive(today, dateProps)) {\n    formatteDate = \"Yesterday\"\n  } else {\n    const monthString = dateProps.toLocaleString('default', { month: 'long' });\n    formatteDate = `${dateProps.getDate()}. ${monthString} ${dateProps.getFullYear()}`;\n  }\n  console.log(formatteDate);\n\n  return (\n    <Flex justifyContent={\"center\"} width=\"100%\">\n      <Box boxShadow=\"md\" bgColor=\"yellow.200\" m=\"1\" p=\"1\" borderRadius=\"20px\">\n        <Text fontSize=\"xs\" p={1}>\n          {formatteDate}\n        </Text>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default ChatDate;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_SC_BASE_URL;\n\nconst getMessagesFromRoom = async (id) => {\n  let token = localStorage.getItem(\"token\");\n\n  try {\n    let response = await axios.get(`${BASE_URL}/message/chatroom/${id}`, {\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getMessagesFromUser = async (id) => {\n  let token = localStorage.getItem(\"token\");\n\n  try {\n    let response = await axios.get(`${BASE_URL}/message/user/${id}`, {\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst postMessage = async (message) => {\n  let token = localStorage.getItem(\"token\");\n\n  try {\n    let response = await axios.post(`${BASE_URL}/message`, message, {\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { getMessagesFromRoom, getMessagesFromUser, postMessage };\n","import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  Flex,\n  Box,\n  Heading,\n  Stack,\n  InputGroup,\n  InputLeftElement,\n  InputRightElement,\n  Input,\n  IconButton,\n  Textarea,\n  ListItem,\n  List,\n  Avatar,\n  Tooltip,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { connect } from \"react-redux\";\nimport { ChatIcon, EmailIcon } from \"@chakra-ui/icons\";\n\nimport ChatMessage from \"./ChatMessage\";\nimport ChatDate from \"./ChatDate\";\n\nimport {\n  getMessagesFromRoom,\n  getMessagesFromUser,\n  postMessage,\n} from \"../services/messageService\";\n\nimport { datesAreOnSameDay } from \"../utils/dateUtils\";\n\nfunction ChatRoom(props) {\n  const [messages, setMessages] = useState([]);\n  const [messageValue, setMessageValue] = useState(\"\");\n  const handleChange = (event) => {\n    setMessageValue(event.target.value);\n  };\n\n  const [top, setTop] = useState(null);\n  const topRef = useRef(null);\n  const bottomRef = useRef();\n\n  useEffect(async () => {\n    if (props.private) {\n      const response = await getMessagesFromUser(props.id);\n      let messages = response.data;\n      // Sort descending\n      messages = sortMessages(messages);\n      setMessages(messages);\n    } else {\n      const response = await getMessagesFromRoom(props.id);\n      let messages = response.data;\n      // Sort descending\n      messages = sortMessages(messages);\n      setMessages(messages);\n    }\n\n    setTimeout(() => {\n      bottomRef.current.scrollIntoView();\n    }, 1);\n  }, []);\n\n  const sortMessages = (messagesToSort) => {\n    let sortedMessages = messagesToSort.sort((a, b) =>\n      new Date(a.updated_at) > new Date(b.updated_at) ? 1 : -1\n    );\n    return sortedMessages;\n  };\n\n  const messagesShareDate = (message1, message2) => {\n    let date1 = new Date(message1.updated_at);\n    let date2 = new Date(message2.updated_at);\n    return datesAreOnSameDay(date1, date2);\n  };\n\n  const sendMessage = async () => {\n    if (messageValue != \"\") {\n      let newMessage;\n      if (props.private) {\n        newMessage = {\n          content: messageValue,\n          user_id: props.user.user_id,\n          recipient_id: props.id,\n        };\n      } else {\n        newMessage = {\n          content: messageValue,\n          user_id: props.user.user_id,\n          room_id: props.id,\n        };\n      }\n      const response = await postMessage(newMessage);\n      let updatedMessages = sortMessages([...messages, response.data]);\n      setMessages(updatedMessages);\n      setMessageValue(\"\");\n    }\n  };\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const toolTipOpen = messages.length == 0;\n\n  return (\n    <Flex\n      maxW=\"100%\"\n      maxH=\"100%\"\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n      flexDirection=\"column\"\n    >\n      <Box\n        display=\"flex\"\n        borderTopRadius=\"md\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        m={0}\n        p={0}\n        bgColor=\"teal\"\n        maxW=\"100%\"\n        height=\"70px\"\n        textAlign=\"center\"\n      >\n        <Avatar\n          size=\"md\"\n          name=\"Dan Abrahmov\"\n          src=\"https://bit.ly/dan-abramov\"\n          mr=\"3\"\n        />\n        <Heading as=\"h4\" size=\"md\" color=\"white\">\n          User\n        </Heading>\n      </Box>\n      <List\n        maxW=\"100%\"\n        height=\"75vh\"\n        overflowY=\"scroll\"\n        bgColor=\"gray.50\"\n        css={{\n          \"::-webkit-scrollbar\": {\n            width: \"5px\",\n            borderRadius: \"10px\",\n          },\n\n          /* Track */\n          \"::-webkit-scrollbar-track\": {\n            background: \"#f1f1f1\",\n            borderRadius: \"10px\",\n          },\n\n          /* Handle */\n          \"::-webkit-scrollbar-thumb\": {\n            background: \"#888\",\n            borderRadius: \"10px\",\n          },\n\n          /* Handle on hover */\n          \"::-webkit-scrollbar-thumb:hover\": {\n            background: \"#555\",\n          },\n        }}\n      >\n        <ListItem key=\"top\">\n          <div ref={topRef}></div>\n        </ListItem>\n        {messages.map((message, index, array) => {\n          if (index == 0) {\n            return (\n              <>\n                <ListItem width=\"100%\" key={index + 1000}>\n                  <ChatDate date={message.updated_at} />\n                </ListItem>\n                <ListItem\n                  width=\"100%\"\n                  key={message.id}\n                  justifyContent={\n                    message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                  }\n                >\n                  <ChatMessage\n                    content={message.content}\n                    time={message.updated_at}\n                    justifyContent={\n                      message.user_id === props.user.user_id\n                        ? \"flex-end\"\n                        : \"flex-start\"\n                    }\n                  />\n                </ListItem>\n              </>\n            );\n          } else if (!messagesShareDate(message, array[index - 1])) {\n            return (\n              <>\n                <ListItem width=\"100%\" key={index + 1000}>\n                  <ChatDate date={array[index - 1].updated_at} />\n                </ListItem>\n                <ListItem\n                  width=\"100%\"\n                  key={message.id}\n                  justifyContent={\n                    message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                  }\n                >\n                  <ChatMessage\n                    content={message.content}\n                    time={message.updated_at}\n                    justifyContent={\n                      message.user_id === props.user.user_id\n                        ? \"flex-end\"\n                        : \"flex-start\"\n                    }\n                  />\n                </ListItem>\n              </>\n            );\n          } else {\n            return (\n              <ListItem\n                width=\"100%\"\n                key={message.id}\n                justifyContent={\n                  message.user_id === 1 ? \"flex-end\" : \"flex-start\"\n                }\n              >\n                <ChatMessage\n                  content={message.content}\n                  time={message.updated_at}\n                  justifyContent={\n                    message.user_id === props.user.user_id\n                      ? \"flex-end\"\n                      : \"flex-start\"\n                  }\n                />\n              </ListItem>\n            );\n          }\n        })}\n        <ListItem key=\"bottom\">\n          <div ref={bottomRef}></div>\n        </ListItem>\n      </List>\n      <Box maxW=\"100%\" height=\"40px\">\n        <Stack spacing={4}>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              children={<EmailIcon color=\"gray.300\" />}\n            />\n            <Input\n              size=\"md\"\n              placeholder=\"Message\"\n              focusBorderColor=\"teal.500\"\n              value={messageValue}\n              onChange={handleChange}\n              onKeyPress={(event) => event.key === \"Enter\" && sendMessage()}\n            />\n            <InputRightElement>\n              <IconButton\n                borderTopRadius=\"0px\"\n                borderBottomLeftRadius=\"0px\"\n                borderBottomRightRadius=\"md\"\n                colorScheme=\"teal\"\n                aria-label=\"Send\"\n                icon={<ChatIcon />}\n                onClick={() => sendMessage()}\n              />\n            </InputRightElement>\n          </InputGroup>\n        </Stack>\n      </Box>\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, null)(ChatRoom);\n","import React from \"react\";\n\nconst Emoji = (props) => (\n  <span\n    className=\"emoji\"\n    role=\"img\"\n    aria-label={props.label ? props.label : \"\"}\n    aria-hidden={props.label ? \"false\" : \"true\"}\n  >\n    {props.symbol}\n  </span>\n);\nexport default Emoji;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_SC_BASE_URL;\n\nconst getRooms = async () => {\n  let token = localStorage.getItem(\"token\");\n\n  try {\n    let response = await axios.get(`${BASE_URL}/chatroom`, {\n      headers: {\n        Authorization: `JWT ${token}`,\n      },\n    });\n    console.log(response);\n    console.log(response.data)\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport { getRooms };\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Flex,\n  List,\n  Button,\n  ListItem,\n  Box,\n  Spacer,\n  Heading,\n  Text,\n  Center,\n  Divider,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport Emoji from \"./Emoji\";\n\nimport { getUsers } from \"../services/userService\";\nimport { getRooms } from \"../services/chatRoomService\";\n\nfunction Home(props) {\n  const [users, setUsers] = useState([]);\n  const [rooms, setRooms] = useState([]);\n\n  useEffect(async () => {\n    let usersResponse = await getUsers();\n    let userList = usersResponse.data;\n\n    let roomsResponse = await getRooms();\n    let roomList = roomsResponse.data\n\n    await setUsers(userList);\n    await setRooms(roomList);\n  }, []);\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const scrollbarColor = useColorModeValue(\"#123123\", \"#643345\");\n\n  return (\n    <Flex\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={2}\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n    >\n      <Box flexGrow=\"1\" textAlign=\"center\">\n        <Heading as=\"h3\" size=\"lg\">\n          <Emoji symbol=\"👥\" /> Join a room!\n        </Heading>\n        <List\n          maxHeight=\"80vh\"\n          overflowY=\"scroll\"\n          spacing={3}\n          m={1}\n          p={3}\n          css={{\n            \"::-webkit-scrollbar\": {\n              width: \"5px\",\n              borderRadius: \"10px\",\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n              background: \"#f1f1f1\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n              background: \"#888\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n              background: \"#555\",\n            },\n          }}\n        >\n          {rooms.map((room) => {\n            return (\n              <ListItem key={room.id}>\n                <Button\n                  size=\"md\"\n                  height=\"48px\"\n                  width=\"100%\"\n                  border=\"2px\"\n                  borderColor=\"teal\"\n                  as=\"a\"\n                  href={\"/chatroom/\" + room.id}\n                >\n                  {room.name}\n                </Button>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n      <Box flexGrow=\"1\" textAlign=\"center\">\n        <Heading as=\"h3\" size=\"lg\">\n          <Emoji symbol=\"🤫\" /> Private chat!\n        </Heading>\n        <List\n          maxHeight=\"80vh\"\n          overflowY=\"scroll\"\n          spacing={3}\n          m={1}\n          p={3}\n          css={{\n            \"::-webkit-scrollbar\": {\n              width: \"5px\",\n              borderRadius: \"10px\",\n            },\n\n            /* Track */\n            \"::-webkit-scrollbar-track\": {\n              background: \"#f1f1f1\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle */\n            \"::-webkit-scrollbar-thumb\": {\n              background: \"#888\",\n              borderRadius: \"10px\",\n            },\n\n            /* Handle on hover */\n            \"::-webkit-scrollbar-thumb:hover\": {\n              background: \"#555\",\n            },\n          }}\n        >\n          {users.map((user) => {\n            return (\n              <ListItem key={user.id}>\n                <Button\n                  size=\"md\"\n                  height=\"48px\"\n                  width=\"100%\"\n                  border=\"2px\"\n                  borderColor=\"teal\"\n                  as=\"a\"\n                  href={\"/chatroom/private/\" + user.id}\n                >\n                  {user.username}\n                </Button>\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { useColorMode, Box, IconButton } from \"@chakra-ui/react\";\nimport { MoonIcon, SunIcon } from \"@chakra-ui/icons\";\n\nfunction ThemeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <div style={{display:\"show\"}}>\n    <Box textAlign=\"right\" py={4} mr={12}>\n      <IconButton\n        icon={colorMode === \"light\" ? <MoonIcon /> : <SunIcon />}\n        onClick={toggleColorMode}\n      />\n    </Box>\n    </div>\n  );\n}\n\nexport default ThemeToggle;\n","import React, { useEffect } from \"react\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Flex, Box, Heading, Spacer, Button } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, useColorModeValue } from \"@chakra-ui/react\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { logoutAction } from \"../reducers/userReducer\";\n\nfunction Header(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  const home = () => {\n    history.push(\"/\");\n  };\n\n  const logout = () => {\n    dispatch(logoutAction());\n    localStorage.removeItem(\"token\");\n    history.push(\"/login\");\n  };\n\n  const login = () => {\n    history.push(\"/login\");\n  };\n\n  return (\n    <Flex\n      align=\"center\"\n      p={2}\n      boxShadow=\"md\"\n      borderBottomRadius=\"md\"\n      bgColor={bgColor}\n    >\n      <Box as=\"button\" p=\"2\" onClick={() => home()} outline=\"0\">\n        <Image\n          src=\"/logo_200.png\"\n          alt=\"Secret Chat\"\n          htmlHeight=\"100px\"\n          htmlWidth=\"150px\"\n        />\n      </Box>\n      <Spacer />\n      {props.user.logged ? (\n        <Button mr={4} colorScheme=\"teal\" onClick={() => logout()}>\n          Log out\n        </Button>\n      ) : (\n        <Button mr={4} colorScheme=\"teal\" onClick={() => login()}>\n          Log in\n        </Button>\n      )}\n      <ThemeToggle />\n    </Flex>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = {\n  logoutAction,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { useEffect } from \"react\";\nimport { Center, Flex } from \"@chakra-ui/react\";\nimport { Text, useColorModeValue } from \"@chakra-ui/react\";\n\nfunction Footer(props) {\n  const bgColor = useColorModeValue(\"teal\", \"gray.800\")\n\n  return (\n    <>\n      <Center\n        bgColor={bgColor}\n        //bgGradient={bgGradient}\n        h=\"60px\"\n        color=\"white\"\n        mt=\"auto\"\n        borderTopRadius=\"md\"\n        boxShadow=\"md\"\n      >\n        <Text fontSize=\"lg\">Made with 💖 from Helsinki</Text>\n      </Center>\n    </>\n  );\n}\n\nexport default Footer;\n","import React, { useEffect } from \"react\";\nimport {\n  Flex,\n  Container,\n  Box,\n  Spacer,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nfunction Layout(props) {\n  const bgColor = useColorModeValue(\"gray.200\", \"gray.900\")\n  const backgroundImage = \"url('/bg.svg')\"\n  \n  return (\n    <>\n      <Box\n        width=\"100vw\"\n        height=\"100vh\"\n        maxWidth=\"100vw\"\n        maxHeight=\"100vh\"\n\n        mx=\"auto\"\n        bgColor={bgColor}\n        backgroundImage={backgroundImage}\n      >\n        <Flex\n          direction=\"column\"\n          maxW={{ xl: \"1200px\" }}\n          height=\"100%\"\n          m=\"0 auto\"\n          {...props}\n        >\n          <Header />\n          <Box flex=\"1 0 auto\">{props.children}</Box>\n          <Footer flexShrink=\"0\" />\n        </Flex>\n      </Box>\n    </>\n  );\n}\n\nexport default Layout;\n","import React, { useEffect } from \"react\";\nimport {\n  Flex,\n  Center,\n  Heading,\n  Image,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nfunction NotFound(props) {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Flex\n      align=\"center\"\n      justifyContent=\"center\"\n      maxW=\"100%\"\n      maxH=\"100%\"\n      p={2}\n      boxShadow=\"sm\"\n      rounded=\"md\"\n      bgColor={bgColor}\n      m={2}\n    >\n      <div>\n        <Image ></Image>\n        <Text fontSize=\"3xl\">404 Not found</Text>\n      </div>\n    </Flex>\n  );\n}\n\nexport default NotFound;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport jwt from 'jwt-decode'\nimport { connect, useDispatch } from \"react-redux\";\nimport { loginAction } from \"../reducers/userReducer\";\nimport Login from \"./Login\";\nimport ChatRoom from \"./ChatRoom\";\nimport Home from \"./Home\";\nimport Layout from \"./Layout\";\nimport NotFound from \"./NotFound\";\n\nfunction App(props) {\n  const dispatch = useDispatch();\n\n  const checkAuthentication = () => {\n    if (props.user.token || localStorage.getItem(\"token\")) {\n      if (!props.user.token) {\n        const token = localStorage.getItem(\"token\")\n        const user_id = jwt(token).identity\n        dispatch(loginAction({ token: token, user_id: user_id}));\n      } else if (!localStorage.getItem(\"token\")) {\n        localStorage.setItem(\"token\", props.user.token);\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const chatRoomMatch = useRouteMatch(\"/chatroom/:id\");\n  const privateRoomMatch = useRouteMatch(\"/chatroom/private/:id\");\n  const isChatRoom = chatRoomMatch ? true : false;\n  const isPrivateRoom = privateRoomMatch ? true : false;\n\n  return (\n    <>\n      <Switch>\n        <Route path={[\"/chatroom/:id\", \"/chatroom/private/:id\"]}>\n          {() =>\n            checkAuthentication() ? (\n              <Layout>\n                <ChatRoom\n                  private={isPrivateRoom}\n                  id={\n                    isPrivateRoom\n                      ? Number(privateRoomMatch.params.id)\n                      : Number(chatRoomMatch.params.id)\n                  }\n                />\n              </Layout>\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        </Route>\n        <Route path=\"/login\">\n          {() =>\n            checkAuthentication() ? (\n              <Redirect to=\"/\" />\n            ) : (\n              <Layout>\n                <Login />\n              </Layout>\n            )\n          }\n        </Route>\n        <Route exact path=\"/\">\n          {() =>\n            checkAuthentication() ? (\n              <Layout>\n                <Home />\n              </Layout>\n            ) : (\n              <Redirect to=\"/login\" />\n            )\n          }\n        </Route>\n        <Route>\n          <Layout>\n            <NotFound />\n          </Layout>\n        </Route>\n      </Switch>\n    </>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n  };\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux'\n\nimport userReducer from './userReducer'\n\nexport default combineReducers({\n    user: userReducer,\n})\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { mode } from \"@chakra-ui/theme-tools\";\n\nconst config = {\n  initialColorMode: \"light\",\n  useSystemColorMode: false,\n};\n\nconst theme = extendTheme({\n  fonts: {\n    heading: \"Open Sans\",\n    body: \"Roboto Mono\",\n  },\n  config,\n});\n\n\nexport default theme","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  ColorModeProvider,\n} from \"@chakra-ui/react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { mode } from \"@chakra-ui/theme-tools\";\nimport Fonts from \"./components/Fonts\";\nimport App from \"./components/App\";\nimport rootReducer from \"./reducers\";\nimport { extendTheme } from \"@chakra-ui/react\";\nimport \"./index.css\";\nimport theme from \"./theme\";\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <ChakraProvider theme={theme}>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <Fonts />\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </ChakraProvider>,\n  rootElement\n);\n"],"sourceRoot":""}